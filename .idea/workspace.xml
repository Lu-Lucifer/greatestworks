<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="56691c90-362e-40c1-9f68-f87746393791" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/aop/config/excel_object/manager.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/loader/absract.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/loader/excel/excel.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/loader/excel/load.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/loader/excel/sheet.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/loader/gob/gob.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/loader/impl.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/aop/rabbitmq/rabbitmq.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/business/server/activity/impl/sign.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/aop/config/excel_object/readme.md" beforeDir="false" afterPath="$PROJECT_DIR$/aop/config/excel_object/readme.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/business/server/activity/abstract.go" beforeDir="false" afterPath="$PROJECT_DIR$/business/server/activity/abstract.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.mod" beforeDir="false" afterPath="$PROJECT_DIR$/go.mod" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.sum" beforeDir="false" afterPath="$PROJECT_DIR$/go.sum" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/gre/need_resolve_problem/readme.md" beforeDir="false" afterPath="$PROJECT_DIR$/gre/need_resolve_problem/readme.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/.golangci.yml" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/.golangci.yml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/2q.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/2q.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/LICENSE" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/LICENSE" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/README.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/arc.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/arc.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/doc.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/doc.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/lru.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/lru.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/LICENSE_list" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/LICENSE_list" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/list.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/list.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/lru.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/lru.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/lru_interface.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/simplelru/lru_interface.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/testing.go" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/github.com/hashicorp/golang-lru/v2/testing.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/vendor/modules.txt" beforeDir="false" afterPath="$PROJECT_DIR$/vendor/modules.txt" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go File" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://C:/Program Files/Go" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GoLibraries">
    <option name="indexEntireGoPath" value="true" />
  </component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="wo1q2q8z" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2GAqubEKVTRnR5ztwBnzHhy5NT8" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "DefaultGoTemplateProperty": "Go File",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.go.format.on.save.advertiser.fired": "true",
    "RunOnceActivity.go.formatter.settings.were.checked": "true",
    "RunOnceActivity.go.migrated.go.modules.settings": "true",
    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
    "RunOnceActivity.go.watchers.conflict.with.on.save.actions.check.performed": "true",
    "WebServerToolWindowFactoryState": "false",
    "configurable..is.expanded": "false",
    "configurable.GoLibrariesConfigurable.is.expanded": "true",
    "git-widget-placeholder": "main",
    "go.import.settings.migrated": "true",
    "go.sdk.automatically.set": "true",
    "last_opened_file_path": "E:/greatestworks/aop/redis/skiplist",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "reference.settings.ide.settings.new.ui"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="E:\greatestworks\aop\redis\skiplist" />
      <recent name="E:\greatestworks\gre\robot" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="E:\greatestworks\aop\fsm" />
      <recent name="D:\goproject\greatestworks\aop" />
      <recent name="D:\goproject\greatestworks\business\module\rank\impl" />
      <recent name="D:\goproject\greatestworks\business\module" />
    </key>
  </component>
  <component name="RunManager" selected="Go Test.TestReg in greatestworks/aop/annotation">
    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
      <module name="greatestworks" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="greatestworks" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="go build greatestworks/business/server/battle/launch" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="greatestworks" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="greatestworks/business/server/battle/launch" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/business/server/battle/launch/main.go" />
      <method v="2" />
    </configuration>
    <configuration name="TestAnnotation in greatestworks/aop/annotation" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="greatestworks" />
      <working_directory value="$PROJECT_DIR$/aop/annotation" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="greatestworks/aop/annotation" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestAnnotation\E$" />
      <method v="2" />
    </configuration>
    <configuration name="TestReg in greatestworks/aop/annotation" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="greatestworks" />
      <working_directory value="$PROJECT_DIR$/aop/annotation" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="greatestworks/aop/annotation" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestReg\E$" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="GoTestRunConfiguration" factoryName="Go Test">
      <module name="greatestworks" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="greatestworks" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go Test.TestReg in greatestworks/aop/annotation" />
        <item itemvalue="Go Test.TestAnnotation in greatestworks/aop/annotation" />
        <item itemvalue="Go Build.go build greatestworks/business/server/battle/launch" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/greatestworks$go_test_FuzzMod_in_greatestworks_aop_tmp_fuzz.out" NAME="go test FuzzMod in greatestworks/aop/tmp/fuzz Coverage Results" MODIFIED="1674964674473" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>